#!/usr/bin/env ruby
# See bin/dotfiles --help for more information

require 'fileutils'
require 'pathname'
require 'optparse'

########################################################
#                                                      #
#                       SETUP                          #
#                                                      #
########################################################

$options = {}
LINUX_OS = 'Linux'
OSX = 'osx'
RUNNING_ON_LINUX = `uname -a`.include?(LINUX_OS)
ROOT_REPO_FOLDER = File.expand_path("..", __dir__)

def puts_verbosely(str, line_space = nil)
  return unless $options[:verbose]

  puts str
  puts line_space if line_space
end

def validate_action!(action)
  case action.to_s
  when ""
  when "from-local"
  when "into-local"
    action.to_s
  else
    raise "No action #{action} found!"
  end
end

def find_os_specific_dotfiles(file_name)
  regexp = if RUNNING_ON_LINUX
    /linux\/\.[a-zA-Z]*/
  else
    /macos\/\.[a-zA-Z]*/
  end

  file_name =~ regexp
end

def os_specific?(name)
  name.include?(LINUX_OS.downcase) || name.include?(OSX)
end

def unpacked_source_name(name)
  unpacked = if os_specific?(name)
               name.split('/')[-1]
             else
               name
             end

  Pathname.new(Dir.home).join(unpacked)
end

OptionParser.new do |opts|
  opts.banner = 'Usage: bin/dotfiles [options]'

  opts.on('-v', '--[no-]verbose', 'Run verbosely') do |v|
    $options[:verbose] = v
  end

   opts.on('-aACTION', '--action=ACTION',
           'Copy from this repo into your local or copy your local into this repo.
            Available names into-local, from-local.
            Defaults to from-local'
          ) do |action|
    validate_action!(action)
    $options[:action] = action
  end

   opts.on('-t', '--[no-]test',
           'Passing anything to this option will have no effect.
            Assume this option as sandbox.'
          ) do |t|
     $options[:test] = t
   end

   opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end
end.parse!

$options[:action] ||= "from-local"

dotfiles = []
os_specific_dotfiles = []

########################################################
#                                                      #
#                       PROGRAM                        #
#                                                      #
########################################################


puts_verbosely "Performing copy #{$options[:action]}", "\n"

`git ls-files`.split(/\n/).each do |file_name|
   dotfiles << file_name if file_name =~ /\A\.[a-zA-Z]/
   os_specific_dotfiles << file_name if find_os_specific_dotfiles(file_name)
end

puts_verbosely "Found #{dotfiles.join(', ')} \n#{os_specific_dotfiles.join(', ')}", "\n"
puts_verbosely "Testing purposes with enabled test option. No changes will have effect.\n\n" if $options[:test]

(dotfiles + os_specific_dotfiles).each do |name|
  begin
    source = unpacked_source_name(name)
    target = Pathname.new(ROOT_REPO_FOLDER).join(name)

    if $options[:action] != "from-local"
      source, target = target, source
    end

    puts_verbosely "Copying #{source} to #{target}"
    FileUtils.copy(source, target) unless $options[:test]
  rescue Errno::ENOENT
    puts "Error: no #{name} found in your homedir"
    next
  end
end

puts
puts "dotfiles copied sucessfully"

